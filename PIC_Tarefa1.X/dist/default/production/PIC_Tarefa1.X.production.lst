

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat Sep 25 22:10:23 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	smallconst
    60  000800                     __psmallconst:
    61                           	callstack 0
    62  000800  00                 	db	0
    63  000801                     _dpowers:
    64                           	callstack 0
    65  000801  0001               	dw	1
    66  000803  000A               	dw	10
    67  000805  0064               	dw	100
    68  000807  03E8               	dw	1000
    69  000809  2710               	dw	10000
    70  00080B                     __end_of_dpowers:
    71                           	callstack 0
    72  0000                     _LATDbits	set	3980
    73  0000                     _TRISD	set	3989
    74  0000                     _OSCCON	set	4051
    75  0000                     _RD3	set	31771
    76  0000                     _RD2	set	31770
    77  0000                     _RD7	set	31775
    78  0000                     _RD6	set	31774
    79  0000                     _RD5	set	31773
    80  0000                     _RD4	set	31772
    81  00080B                     STR_1:
    82  00080B  48                 	db	72	;'H'
    83  00080C  65                 	db	101	;'e'
    84  00080D  6C                 	db	108	;'l'
    85  00080E  6C                 	db	108	;'l'
    86  00080F  6F                 	db	111	;'o'
    87  000810  20                 	db	32
    88  000811  77                 	db	119	;'w'
    89  000812  6F                 	db	111	;'o'
    90  000813  72                 	db	114	;'r'
    91  000814  6C                 	db	108	;'l'
    92  000815  64                 	db	100	;'d'
    93  000816  21                 	db	33
    94  000817  20                 	db	32
    95  000818  00                 	db	0
    96  000819                     STR_2:
    97  000819  43                 	db	67	;'C'
    98  00081A  6F                 	db	111	;'o'
    99  00081B  6E                 	db	110	;'n'
   100  00081C  74                 	db	116	;'t'
   101  00081D  61                 	db	97	;'a'
   102  00081E  64                 	db	100	;'d'
   103  00081F  6F                 	db	111	;'o'
   104  000820  72                 	db	114	;'r'
   105  000821  3A                 	db	58	;':'
   106  000822  20                 	db	32
   107  000823  25                 	db	37
   108  000824  69                 	db	105	;'i'
   109  000825  20                 	db	32
   110  000826  00                 	db	0
   111  000827  00                 	db	0	; dummy byte at the end
   112  0000                     
   113                           ; #config settings
   114                           
   115                           	psect	cinit
   116  000D80                     __pcinit:
   117                           	callstack 0
   118  000D80                     start_initialization:
   119                           	callstack 0
   120  000D80                     __initialization:
   121                           	callstack 0
   122                           
   123                           ; Clear objects allocated to COMRAM (34 bytes)
   124  000D80  EE00  F001         	lfsr	0,__pbssCOMRAM
   125  000D84  0E22               	movlw	34
   126  000D86                     clear_0:
   127  000D86  6AEE               	clrf	postinc0,c
   128  000D88  06E8               	decf	wreg,f,c
   129  000D8A  E1FD               	bnz	clear_0
   130  000D8C                     end_of_initialization:
   131                           	callstack 0
   132  000D8C                     __end_of__initialization:
   133                           	callstack 0
   134  000D8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   135  000D8E  6EF8               	movwf	tblptru,c
   136  000D90  0100               	movlb	0
   137  000D92  EF4D  F005         	goto	_main	;jump to C main() function
   138                           
   139                           	psect	bssCOMRAM
   140  000001                     __pbssCOMRAM:
   141                           	callstack 0
   142  000001                     _contador:
   143                           	callstack 0
   144  000001                     	ds	2
   145  000003                     _linha2:
   146                           	callstack 0
   147  000003                     	ds	16
   148  000013                     _linha1:
   149                           	callstack 0
   150  000013                     	ds	16
   151                           
   152                           	psect	cstackCOMRAM
   153  000023                     __pcstackCOMRAM:
   154                           	callstack 0
   155  000023                     ?___lwdiv:
   156                           	callstack 0
   157  000023                     Lcd_Port@a:
   158                           	callstack 0
   159  000023                     ___lwdiv@dividend:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0x0
   163  000023                     	ds	1
   164  000024                     ??_Lcd_Cmd:
   165  000024                     Lcd_Write_Char@temp:
   166                           	callstack 0
   167                           
   168                           ; 1 bytes @ 0x1
   169  000024                     	ds	1
   170  000025                     Lcd_Cmd@a:
   171                           	callstack 0
   172  000025                     Lcd_Write_Char@y:
   173                           	callstack 0
   174  000025                     ___lwdiv@divisor:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0x2
   178  000025                     	ds	1
   179  000026                     ??_Lcd_Init:
   180  000026                     Lcd_Set_Cursor@b:
   181                           	callstack 0
   182  000026                     Lcd_Write_Char@a:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0x3
   186  000026                     	ds	1
   187  000027                     Lcd_Set_Cursor@a:
   188                           	callstack 0
   189  000027                     Lcd_Write_String@a:
   190                           	callstack 0
   191  000027                     ___lwdiv@quotient:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x4
   195  000027                     	ds	1
   196  000028                     Lcd_Set_Cursor@z:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x5
   200  000028                     	ds	1
   201  000029                     Lcd_Set_Cursor@y:
   202                           	callstack 0
   203  000029                     ___lwdiv@counter:
   204                           	callstack 0
   205  000029                     Lcd_Write_String@i:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000029                     	ds	1
   210  00002A                     ?___lwmod:
   211                           	callstack 0
   212  00002A                     Lcd_Set_Cursor@temp:
   213                           	callstack 0
   214  00002A                     ___lwmod@dividend:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x7
   218  00002A                     	ds	2
   219  00002C                     ___lwmod@divisor:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x9
   223  00002C                     	ds	2
   224  00002E                     ___lwmod@counter:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0xB
   228  00002E                     	ds	1
   229  00002F                     ?_sprintf:
   230                           	callstack 0
   231  00002F                     sprintf@sp:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0xC
   235  00002F                     	ds	2
   236  000031                     sprintf@f:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0xE
   240  000031                     	ds	4
   241  000035                     ??_sprintf:
   242                           
   243                           ; 1 bytes @ 0x12
   244  000035                     	ds	1
   245  000036                     sprintf@ap:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0x13
   249  000036                     	ds	2
   250  000038                     sprintf@flag:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x15
   254  000038                     	ds	1
   255  000039                     sprintf@prec:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0x16
   259  000039                     	ds	1
   260  00003A                     sprintf@val:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x17
   264  00003A                     	ds	2
   265  00003C                     sprintf@c:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x19
   269  00003C                     	ds	1
   270  00003D                     ??_main:
   271                           
   272                           ; 1 bytes @ 0x1A
   273  00003D                     	ds	2
   274                           
   275 ;;
   276 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   277 ;;
   278 ;; *************** function _main *****************
   279 ;; Defined at:
   280 ;;		line 30 in file "exercicio4.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;		None
   285 ;; Return value:  Size  Location     Type
   286 ;;                  1    wreg      void 
   287 ;; Registers used:
   288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   289 ;; Tracked objects:
   290 ;;		On entry : 0/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   294 ;;      Params:         0       0       0       0       0       0       0       0       0
   295 ;;      Locals:         0       0       0       0       0       0       0       0       0
   296 ;;      Temps:          2       0       0       0       0       0       0       0       0
   297 ;;      Totals:         2       0       0       0       0       0       0       0       0
   298 ;;Total ram usage:        2 bytes
   299 ;; Hardware stack levels required when called:    3
   300 ;; This function calls:
   301 ;;		_Lcd_Init
   302 ;;		_Lcd_Set_Cursor
   303 ;;		_Lcd_Write_String
   304 ;;		_sprintf
   305 ;; This function is called by:
   306 ;;		Startup code after reset
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           	psect	text0
   311  000A9A                     __ptext0:
   312                           	callstack 0
   313  000A9A                     _main:
   314                           	callstack 28
   315  000A9A                     
   316                           ;exercicio4.c: 32: OSCCON = 0b01100000;
   317  000A9A  0E60               	movlw	96
   318  000A9C  6ED3               	movwf	211,c	;volatile
   319                           
   320                           ;exercicio4.c: 33: TRISD = 0;
   321  000A9E  0E00               	movlw	0
   322  000AA0  6E95               	movwf	149,c	;volatile
   323  000AA2                     
   324                           ;exercicio4.c: 35: Lcd_Init();
   325  000AA2  ECDB  F005         	call	_Lcd_Init	;wreg free
   326  000AA6                     
   327                           ;exercicio4.c: 36: sprintf(linha1, "Hello world! ");
   328  000AA6  0E13               	movlw	low _linha1
   329  000AA8  6E2F               	movwf	sprintf@sp^0,c
   330  000AAA  0E00               	movlw	high _linha1
   331  000AAC  6E30               	movwf	(sprintf@sp+1)^0,c
   332  000AAE  0E0B               	movlw	low STR_1
   333  000AB0  6E31               	movwf	sprintf@f^0,c
   334  000AB2  0E08               	movlw	high STR_1
   335  000AB4  6E32               	movwf	(sprintf@f+1)^0,c
   336  000AB6  EC14  F004         	call	_sprintf	;wreg free
   337  000ABA                     
   338                           ;exercicio4.c: 37: Lcd_Set_Cursor(1,1);
   339  000ABA  0E01               	movlw	1
   340  000ABC  6E26               	movwf	Lcd_Set_Cursor@b^0,c
   341  000ABE  0E01               	movlw	1
   342  000AC0  ECE4  F004         	call	_Lcd_Set_Cursor
   343  000AC4                     
   344                           ;exercicio4.c: 38: Lcd_Write_String(linha1);
   345  000AC4  0E13               	movlw	low _linha1
   346  000AC6  6E27               	movwf	Lcd_Write_String@a^0,c
   347  000AC8  0E00               	movlw	high _linha1
   348  000ACA  6E28               	movwf	(Lcd_Write_String@a+1)^0,c
   349  000ACC  EC74  F006         	call	_Lcd_Write_String	;wreg free
   350  000AD0                     l1235:
   351                           
   352                           ;exercicio4.c: 41: {;exercicio4.c: 42: sprintf(linha2, "Contador: %i ",contador);
   353  000AD0  0E03               	movlw	low _linha2
   354  000AD2  6E2F               	movwf	sprintf@sp^0,c
   355  000AD4  0E00               	movlw	high _linha2
   356  000AD6  6E30               	movwf	(sprintf@sp+1)^0,c
   357  000AD8  0E19               	movlw	low STR_2
   358  000ADA  6E31               	movwf	sprintf@f^0,c
   359  000ADC  0E08               	movlw	high STR_2
   360  000ADE  6E32               	movwf	(sprintf@f+1)^0,c
   361  000AE0  C001  F033         	movff	_contador,?_sprintf+4
   362  000AE4  C002  F034         	movff	_contador+1,?_sprintf+5
   363  000AE8  EC14  F004         	call	_sprintf	;wreg free
   364  000AEC                     
   365                           ;exercicio4.c: 43: contador ++;
   366  000AEC  4A01               	infsnz	_contador^0,f,c
   367  000AEE  2A02               	incf	(_contador+1)^0,f,c
   368  000AF0                     
   369                           ;exercicio4.c: 44: Lcd_Set_Cursor(2,1);
   370  000AF0  0E01               	movlw	1
   371  000AF2  6E26               	movwf	Lcd_Set_Cursor@b^0,c
   372  000AF4  0E02               	movlw	2
   373  000AF6  ECE4  F004         	call	_Lcd_Set_Cursor
   374  000AFA                     
   375                           ;exercicio4.c: 45: Lcd_Write_String(linha2);
   376  000AFA  0E03               	movlw	low _linha2
   377  000AFC  6E27               	movwf	Lcd_Write_String@a^0,c
   378  000AFE  0E00               	movlw	high _linha2
   379  000B00  6E28               	movwf	(Lcd_Write_String@a+1)^0,c
   380  000B02  EC74  F006         	call	_Lcd_Write_String	;wreg free
   381  000B06                     
   382                           ;exercicio4.c: 46: LATDbits.LATD0 = !LATDbits.LATD0;
   383  000B06  A08C               	btfss	140,0,c	;volatile
   384  000B08  EF88  F005         	goto	u431
   385  000B0C  EF8C  F005         	goto	u430
   386  000B10                     u431:
   387  000B10  6A3D               	clrf	??_main^0,c
   388  000B12  2A3D               	incf	??_main^0,f,c
   389  000B14  EF8D  F005         	goto	u448
   390  000B18                     u430:
   391  000B18  6A3D               	clrf	??_main^0,c
   392  000B1A                     u448:
   393  000B1A  508C               	movf	140,w,c	;volatile
   394  000B1C  183D               	xorwf	??_main^0,w,c
   395  000B1E  0BFE               	andlw	-2
   396  000B20  183D               	xorwf	??_main^0,w,c
   397  000B22  6E8C               	movwf	140,c	;volatile
   398  000B24                     
   399                           ;exercicio4.c: 47: _delay((unsigned long)((500)*(4000000/4000.0)));
   400  000B24  0E03               	movlw	3
   401  000B26  6E3E               	movwf	(??_main+1)^0,c
   402  000B28  0E8A               	movlw	138
   403  000B2A  6E3D               	movwf	??_main^0,c
   404  000B2C  0E56               	movlw	86
   405  000B2E                     u457:
   406  000B2E  2EE8               	decfsz	wreg,f,c
   407  000B30  D7FE               	bra	u457
   408  000B32  2E3D               	decfsz	??_main^0,f,c
   409  000B34  D7FC               	bra	u457
   410  000B36  2E3E               	decfsz	(??_main+1)^0,f,c
   411  000B38  D7FA               	bra	u457
   412  000B3A  EF68  F005         	goto	l1235
   413  000B3E  EF00  F000         	goto	start
   414  000B42                     __end_of_main:
   415                           	callstack 0
   416                           
   417 ;; *************** function _sprintf *****************
   418 ;; Defined at:
   419 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;  sp              2   12[COMRAM] PTR unsigned char 
   422 ;;		 -> linha2(16), linha1(16), 
   423 ;;  f               2   14[COMRAM] PTR const unsigned char 
   424 ;;		 -> STR_2(14), STR_1(14), 
   425 ;; Auto vars:     Size  Location     Type
   426 ;;  tmpval          4    0        struct .
   427 ;;  cp              3    0        PTR const unsigned char 
   428 ;;  val             2   23[COMRAM] unsigned int 
   429 ;;  ap              2   19[COMRAM] PTR void [1]
   430 ;;		 -> ?_sprintf(2), 
   431 ;;  len             2    0        unsigned int 
   432 ;;  c               1   25[COMRAM] unsigned char 
   433 ;;  prec            1   22[COMRAM] char 
   434 ;;  flag            1   21[COMRAM] unsigned char 
   435 ;; Return value:  Size  Location     Type
   436 ;;                  2   12[COMRAM] int 
   437 ;; Registers used:
   438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : 0/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   444 ;;      Params:         6       0       0       0       0       0       0       0       0
   445 ;;      Locals:         7       0       0       0       0       0       0       0       0
   446 ;;      Temps:          1       0       0       0       0       0       0       0       0
   447 ;;      Totals:        14       0       0       0       0       0       0       0       0
   448 ;;Total ram usage:       14 bytes
   449 ;; Hardware stack levels used:    1
   450 ;; Hardware stack levels required when called:    1
   451 ;; This function calls:
   452 ;;		___lwdiv
   453 ;;		___lwmod
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text1
   460  000828                     __ptext1:
   461                           	callstack 0
   462  000828                     _sprintf:
   463                           	callstack 29
   464  000828                     
   465                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   466  000828  0E33               	movlw	low (?_sprintf+4)
   467  00082A  6E36               	movwf	sprintf@ap^0,c
   468  00082C  0E00               	movlw	high (?_sprintf+4)
   469  00082E  6E37               	movwf	(sprintf@ap+1)^0,c
   470                           
   471                           ;doprnt.c: 553: while((c = *f++)) {
   472  000830  EFCC  F004         	goto	l1219
   473  000834                     l1167:
   474                           
   475                           ;doprnt.c: 555: if(c != '%')
   476  000834  0E25               	movlw	37
   477  000836  183C               	xorwf	sprintf@c^0,w,c
   478  000838  B4D8               	btfsc	status,2,c
   479  00083A  EF21  F004         	goto	u361
   480  00083E  EF23  F004         	goto	u360
   481  000842                     u361:
   482  000842  EF2D  F004         	goto	l1173
   483  000846                     u360:
   484  000846                     
   485                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   486  000846  C02F  FFD9         	movff	sprintf@sp,fsr2l
   487  00084A  C030  FFDA         	movff	sprintf@sp+1,fsr2h
   488  00084E  C03C  FFDF         	movff	sprintf@c,indf2
   489  000852  4A2F               	infsnz	sprintf@sp^0,f,c
   490  000854  2A30               	incf	(sprintf@sp+1)^0,f,c
   491                           
   492                           ;doprnt.c: 559: continue;
   493  000856  EFCC  F004         	goto	l1219
   494  00085A                     l1173:
   495                           
   496                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   497  00085A  0E00               	movlw	0
   498  00085C  6E38               	movwf	sprintf@flag^0,c
   499  00085E  C031  FFF6         	movff	sprintf@f,tblptrl
   500  000862  C032  FFF7         	movff	sprintf@f+1,tblptrh
   501  000866  4A31               	infsnz	sprintf@f^0,f,c
   502  000868  2A32               	incf	(sprintf@f+1)^0,f,c
   503  00086A                     	if	0	;tblptru may be non-zero
   504  00086A                     	endif
   505  00086A                     	if	0	;tblptru may be non-zero
   506  00086A                     	endif
   507  00086A  0008               	tblrd		*
   508  00086C  CFF5 F03C          	movff	tablat,sprintf@c
   509  000870  503C               	movf	sprintf@c^0,w,c
   510                           
   511                           ; Switch size 1, requested type "simple"
   512                           ; Number of cases is 3, Range of values is 0 to 105
   513                           ; switch strategies available:
   514                           ; Name         Instructions Cycles
   515                           ; simple_byte           10     6 (average)
   516                           ;	Chosen strategy is simple_byte
   517  000872  0A00               	xorlw	0	; case 0
   518  000874  B4D8               	btfsc	status,2,c
   519  000876  EFDD  F004         	goto	l1221
   520  00087A  0A64               	xorlw	100	; case 100
   521  00087C  B4D8               	btfsc	status,2,c
   522  00087E  EF47  F004         	goto	l1179
   523  000882  0A0D               	xorlw	13	; case 105
   524  000884  B4D8               	btfsc	status,2,c
   525  000886  EF47  F004         	goto	l1179
   526  00088A  EFCC  F004         	goto	l1219
   527  00088E                     l1179:
   528                           
   529                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
   530  00088E  C036  FFD9         	movff	sprintf@ap,fsr2l
   531  000892  C037  FFDA         	movff	sprintf@ap+1,fsr2h
   532  000896  CFDE F03A          	movff	postinc2,sprintf@val
   533  00089A  CFDD F03B          	movff	postdec2,sprintf@val+1
   534  00089E  0E02               	movlw	2
   535  0008A0  2636               	addwf	sprintf@ap^0,f,c
   536  0008A2  0E00               	movlw	0
   537  0008A4  2237               	addwfc	(sprintf@ap+1)^0,f,c
   538  0008A6                     
   539                           ;doprnt.c: 1287: if((int)val < 0) {
   540  0008A6  BE3B               	btfsc	(sprintf@val+1)^0,7,c
   541  0008A8  EF5A  F004         	goto	u370
   542  0008AC  EF58  F004         	goto	u371
   543  0008B0                     u371:
   544  0008B0  EF60  F004         	goto	l1189
   545  0008B4                     u370:
   546  0008B4                     
   547                           ;doprnt.c: 1288: flag |= 0x03;
   548  0008B4  0E03               	movlw	3
   549  0008B6  1238               	iorwf	sprintf@flag^0,f,c
   550  0008B8                     
   551                           ;doprnt.c: 1289: val = -val;
   552  0008B8  6C3A               	negf	sprintf@val^0,c
   553  0008BA  1E3B               	comf	(sprintf@val+1)^0,f,c
   554  0008BC  B0D8               	btfsc	status,0,c
   555  0008BE  2A3B               	incf	(sprintf@val+1)^0,f,c
   556  0008C0                     l1189:
   557                           
   558                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
   559  0008C0  0E01               	movlw	1
   560  0008C2  6E3C               	movwf	sprintf@c^0,c
   561  0008C4                     l1195:
   562                           
   563                           ;doprnt.c: 1332: if(val < dpowers[c])
   564  0008C4  503C               	movf	sprintf@c^0,w,c
   565  0008C6  0D02               	mullw	2
   566  0008C8  0E01               	movlw	low _dpowers
   567  0008CA  24F3               	addwf	243,w,c
   568  0008CC  6EF6               	movwf	tblptrl,c
   569  0008CE  0E08               	movlw	high _dpowers
   570  0008D0  20F4               	addwfc	244,w,c
   571  0008D2  6EF7               	movwf	tblptrh,c
   572  0008D4                     	if	0	;There are less than 3 active tblptr bytes
   573  0008D4                     	endif
   574  0008D4  0009               	tblrd		*+
   575  0008D6  50F5               	movf	tablat,w,c
   576  0008D8  5C3A               	subwf	sprintf@val^0,w,c
   577  0008DA  0009               	tblrd		*+
   578  0008DC  50F5               	movf	tablat,w,c
   579  0008DE  583B               	subwfb	(sprintf@val+1)^0,w,c
   580  0008E0  B0D8               	btfsc	status,0,c
   581  0008E2  EF75  F004         	goto	u381
   582  0008E6  EF77  F004         	goto	u380
   583  0008EA                     u381:
   584  0008EA  EF79  F004         	goto	l1199
   585  0008EE                     u380:
   586  0008EE  EF83  F004         	goto	l1203
   587  0008F2                     l1199:
   588  0008F2  2A3C               	incf	sprintf@c^0,f,c
   589  0008F4  0E05               	movlw	5
   590  0008F6  183C               	xorwf	sprintf@c^0,w,c
   591  0008F8  A4D8               	btfss	status,2,c
   592  0008FA  EF81  F004         	goto	u391
   593  0008FE  EF83  F004         	goto	u390
   594  000902                     u391:
   595  000902  EF62  F004         	goto	l1195
   596  000906                     u390:
   597  000906                     l1203:
   598                           
   599                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
   600  000906  C038  F035         	movff	sprintf@flag,??_sprintf
   601  00090A  0E03               	movlw	3
   602  00090C  1635               	andwf	??_sprintf^0,f,c
   603  00090E  B4D8               	btfsc	status,2,c
   604  000910  EF8C  F004         	goto	u401
   605  000914  EF8E  F004         	goto	u400
   606  000918                     u401:
   607  000918  EF96  F004         	goto	l1209
   608  00091C                     u400:
   609  00091C                     
   610                           ;doprnt.c: 1465: ((*sp++ = ('-')));
   611  00091C  C02F  FFD9         	movff	sprintf@sp,fsr2l
   612  000920  C030  FFDA         	movff	sprintf@sp+1,fsr2h
   613  000924  0E2D               	movlw	45
   614  000926  6EDF               	movwf	indf2,c
   615  000928  4A2F               	infsnz	sprintf@sp^0,f,c
   616  00092A  2A30               	incf	(sprintf@sp+1)^0,f,c
   617  00092C                     l1209:
   618                           
   619                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   620  00092C  C03C  F039         	movff	sprintf@c,sprintf@prec
   621                           
   622                           ;doprnt.c: 1500: while(prec--) {
   623  000930  EFC3  F004         	goto	l1217
   624  000934                     l1211:
   625                           
   626                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   627  000934  5039               	movf	sprintf@prec^0,w,c
   628  000936  0D02               	mullw	2
   629  000938  0E01               	movlw	low _dpowers
   630  00093A  24F3               	addwf	243,w,c
   631  00093C  6EF6               	movwf	tblptrl,c
   632  00093E  0E08               	movlw	high _dpowers
   633  000940  20F4               	addwfc	244,w,c
   634  000942  6EF7               	movwf	tblptrh,c
   635  000944                     	if	0	;There are less than 3 active tblptr bytes
   636  000944                     	endif
   637  000944  0009               	tblrd		*+
   638  000946  CFF5 F025          	movff	tablat,___lwdiv@divisor
   639  00094A  000A               	tblrd		*-
   640  00094C  CFF5 F026          	movff	tablat,___lwdiv@divisor+1
   641  000950  C03A  F023         	movff	sprintf@val,___lwdiv@dividend
   642  000954  C03B  F024         	movff	sprintf@val+1,___lwdiv@dividend+1
   643  000958  ECA1  F005         	call	___lwdiv	;wreg free
   644  00095C  C023  F02A         	movff	?___lwdiv,___lwmod@dividend
   645  000960  C024  F02B         	movff	?___lwdiv+1,___lwmod@dividend+1
   646  000964  0E00               	movlw	0
   647  000966  6E2D               	movwf	(___lwmod@divisor+1)^0,c
   648  000968  0E0A               	movlw	10
   649  00096A  6E2C               	movwf	___lwmod@divisor^0,c
   650  00096C  EC14  F006         	call	___lwmod	;wreg free
   651  000970  502A               	movf	?___lwmod^0,w,c
   652  000972  0F30               	addlw	48
   653  000974  6E3C               	movwf	sprintf@c^0,c
   654  000976                     
   655                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
   656  000976  C02F  FFD9         	movff	sprintf@sp,fsr2l
   657  00097A  C030  FFDA         	movff	sprintf@sp+1,fsr2h
   658  00097E  C03C  FFDF         	movff	sprintf@c,indf2
   659  000982  4A2F               	infsnz	sprintf@sp^0,f,c
   660  000984  2A30               	incf	(sprintf@sp+1)^0,f,c
   661  000986                     l1217:
   662  000986  0639               	decf	sprintf@prec^0,f,c
   663  000988  2839               	incf	sprintf@prec^0,w,c
   664  00098A  A4D8               	btfss	status,2,c
   665  00098C  EFCA  F004         	goto	u411
   666  000990  EFCC  F004         	goto	u410
   667  000994                     u411:
   668  000994  EF9A  F004         	goto	l1211
   669  000998                     u410:
   670  000998                     l1219:
   671  000998  C031  FFF6         	movff	sprintf@f,tblptrl
   672  00099C  C032  FFF7         	movff	sprintf@f+1,tblptrh
   673  0009A0  4A31               	infsnz	sprintf@f^0,f,c
   674  0009A2  2A32               	incf	(sprintf@f+1)^0,f,c
   675  0009A4                     	if	0	;tblptru may be non-zero
   676  0009A4                     	endif
   677  0009A4                     	if	0	;tblptru may be non-zero
   678  0009A4                     	endif
   679  0009A4  0008               	tblrd		*
   680  0009A6  CFF5 F03C          	movff	tablat,sprintf@c
   681  0009AA  503C               	movf	sprintf@c^0,w,c
   682  0009AC  A4D8               	btfss	status,2,c
   683  0009AE  EFDB  F004         	goto	u421
   684  0009B2  EFDD  F004         	goto	u420
   685  0009B6                     u421:
   686  0009B6  EF1A  F004         	goto	l1167
   687  0009BA                     u420:
   688  0009BA                     l1221:
   689                           
   690                           ;doprnt.c: 1564: *sp = 0;
   691  0009BA  C02F  FFD9         	movff	sprintf@sp,fsr2l
   692  0009BE  C030  FFDA         	movff	sprintf@sp+1,fsr2h
   693  0009C2  0E00               	movlw	0
   694  0009C4  6EDF               	movwf	indf2,c
   695  0009C6  0012               	return		;funcret
   696  0009C8                     __end_of_sprintf:
   697                           	callstack 0
   698                           
   699 ;; *************** function ___lwmod *****************
   700 ;; Defined at:
   701 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  dividend        2    7[COMRAM] unsigned int 
   704 ;;  divisor         2    9[COMRAM] unsigned int 
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  counter         1   11[COMRAM] unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  2    7[COMRAM] unsigned int 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   716 ;;      Params:         4       0       0       0       0       0       0       0       0
   717 ;;      Locals:         1       0       0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0
   719 ;;      Totals:         5       0       0       0       0       0       0       0       0
   720 ;;Total ram usage:        5 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_sprintf
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text2
   730  000C28                     __ptext2:
   731                           	callstack 0
   732  000C28                     ___lwmod:
   733                           	callstack 29
   734  000C28  502C               	movf	___lwmod@divisor^0,w,c
   735  000C2A  102D               	iorwf	(___lwmod@divisor+1)^0,w,c
   736  000C2C  B4D8               	btfsc	status,2,c
   737  000C2E  EF1B  F006         	goto	u281
   738  000C32  EF1D  F006         	goto	u280
   739  000C36                     u281:
   740  000C36  EF41  F006         	goto	l595
   741  000C3A                     u280:
   742  000C3A  0E01               	movlw	1
   743  000C3C  6E2E               	movwf	___lwmod@counter^0,c
   744  000C3E  EF25  F006         	goto	l1115
   745  000C42                     l1113:
   746  000C42  90D8               	bcf	status,0,c
   747  000C44  362C               	rlcf	___lwmod@divisor^0,f,c
   748  000C46  362D               	rlcf	(___lwmod@divisor+1)^0,f,c
   749  000C48  2A2E               	incf	___lwmod@counter^0,f,c
   750  000C4A                     l1115:
   751  000C4A  AE2D               	btfss	(___lwmod@divisor+1)^0,7,c
   752  000C4C  EF2A  F006         	goto	u291
   753  000C50  EF2C  F006         	goto	u290
   754  000C54                     u291:
   755  000C54  EF21  F006         	goto	l1113
   756  000C58                     u290:
   757  000C58                     l1117:
   758  000C58  502C               	movf	___lwmod@divisor^0,w,c
   759  000C5A  5C2A               	subwf	___lwmod@dividend^0,w,c
   760  000C5C  502D               	movf	(___lwmod@divisor+1)^0,w,c
   761  000C5E  582B               	subwfb	(___lwmod@dividend+1)^0,w,c
   762  000C60  A0D8               	btfss	status,0,c
   763  000C62  EF35  F006         	goto	u301
   764  000C66  EF37  F006         	goto	u300
   765  000C6A                     u301:
   766  000C6A  EF3B  F006         	goto	l1121
   767  000C6E                     u300:
   768  000C6E  502C               	movf	___lwmod@divisor^0,w,c
   769  000C70  5E2A               	subwf	___lwmod@dividend^0,f,c
   770  000C72  502D               	movf	(___lwmod@divisor+1)^0,w,c
   771  000C74  5A2B               	subwfb	(___lwmod@dividend+1)^0,f,c
   772  000C76                     l1121:
   773  000C76  90D8               	bcf	status,0,c
   774  000C78  322D               	rrcf	(___lwmod@divisor+1)^0,f,c
   775  000C7A  322C               	rrcf	___lwmod@divisor^0,f,c
   776  000C7C  2E2E               	decfsz	___lwmod@counter^0,f,c
   777  000C7E  EF2C  F006         	goto	l1117
   778  000C82                     l595:
   779  000C82  C02A  F02A         	movff	___lwmod@dividend,?___lwmod
   780  000C86  C02B  F02B         	movff	___lwmod@dividend+1,?___lwmod+1
   781  000C8A  0012               	return		;funcret
   782  000C8C                     __end_of___lwmod:
   783                           	callstack 0
   784                           
   785 ;; *************** function ___lwdiv *****************
   786 ;; Defined at:
   787 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  dividend        2    0[COMRAM] unsigned int 
   790 ;;  divisor         2    2[COMRAM] unsigned int 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  quotient        2    4[COMRAM] unsigned int 
   793 ;;  counter         1    6[COMRAM] unsigned char 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  2    0[COMRAM] unsigned int 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   803 ;;      Params:         4       0       0       0       0       0       0       0       0
   804 ;;      Locals:         3       0       0       0       0       0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0
   806 ;;      Totals:         7       0       0       0       0       0       0       0       0
   807 ;;Total ram usage:        7 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_sprintf
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text3
   817  000B42                     __ptext3:
   818                           	callstack 0
   819  000B42                     ___lwdiv:
   820                           	callstack 29
   821  000B42  0E00               	movlw	0
   822  000B44  6E28               	movwf	(___lwdiv@quotient+1)^0,c
   823  000B46  0E00               	movlw	0
   824  000B48  6E27               	movwf	___lwdiv@quotient^0,c
   825  000B4A  5025               	movf	___lwdiv@divisor^0,w,c
   826  000B4C  1026               	iorwf	(___lwdiv@divisor+1)^0,w,c
   827  000B4E  B4D8               	btfsc	status,2,c
   828  000B50  EFAC  F005         	goto	u251
   829  000B54  EFAE  F005         	goto	u250
   830  000B58                     u251:
   831  000B58  EFD6  F005         	goto	l585
   832  000B5C                     u250:
   833  000B5C  0E01               	movlw	1
   834  000B5E  6E29               	movwf	___lwdiv@counter^0,c
   835  000B60  EFB6  F005         	goto	l1095
   836  000B64                     l1093:
   837  000B64  90D8               	bcf	status,0,c
   838  000B66  3625               	rlcf	___lwdiv@divisor^0,f,c
   839  000B68  3626               	rlcf	(___lwdiv@divisor+1)^0,f,c
   840  000B6A  2A29               	incf	___lwdiv@counter^0,f,c
   841  000B6C                     l1095:
   842  000B6C  AE26               	btfss	(___lwdiv@divisor+1)^0,7,c
   843  000B6E  EFBB  F005         	goto	u261
   844  000B72  EFBD  F005         	goto	u260
   845  000B76                     u261:
   846  000B76  EFB2  F005         	goto	l1093
   847  000B7A                     u260:
   848  000B7A                     l1097:
   849  000B7A  90D8               	bcf	status,0,c
   850  000B7C  3627               	rlcf	___lwdiv@quotient^0,f,c
   851  000B7E  3628               	rlcf	(___lwdiv@quotient+1)^0,f,c
   852  000B80  5025               	movf	___lwdiv@divisor^0,w,c
   853  000B82  5C23               	subwf	___lwdiv@dividend^0,w,c
   854  000B84  5026               	movf	(___lwdiv@divisor+1)^0,w,c
   855  000B86  5824               	subwfb	(___lwdiv@dividend+1)^0,w,c
   856  000B88  A0D8               	btfss	status,0,c
   857  000B8A  EFC9  F005         	goto	u271
   858  000B8E  EFCB  F005         	goto	u270
   859  000B92                     u271:
   860  000B92  EFD0  F005         	goto	l1105
   861  000B96                     u270:
   862  000B96  5025               	movf	___lwdiv@divisor^0,w,c
   863  000B98  5E23               	subwf	___lwdiv@dividend^0,f,c
   864  000B9A  5026               	movf	(___lwdiv@divisor+1)^0,w,c
   865  000B9C  5A24               	subwfb	(___lwdiv@dividend+1)^0,f,c
   866  000B9E  8027               	bsf	___lwdiv@quotient^0,0,c
   867  000BA0                     l1105:
   868  000BA0  90D8               	bcf	status,0,c
   869  000BA2  3226               	rrcf	(___lwdiv@divisor+1)^0,f,c
   870  000BA4  3225               	rrcf	___lwdiv@divisor^0,f,c
   871  000BA6  2E29               	decfsz	___lwdiv@counter^0,f,c
   872  000BA8  EFBD  F005         	goto	l1097
   873  000BAC                     l585:
   874  000BAC  C027  F023         	movff	___lwdiv@quotient,?___lwdiv
   875  000BB0  C028  F024         	movff	___lwdiv@quotient+1,?___lwdiv+1
   876  000BB4  0012               	return		;funcret
   877  000BB6                     __end_of___lwdiv:
   878                           	callstack 0
   879                           
   880 ;; *************** function _Lcd_Write_String *****************
   881 ;; Defined at:
   882 ;;		line 160 in file "lcd.h"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  a               2    4[COMRAM] PTR unsigned char 
   885 ;;		 -> linha2(16), linha1(16), 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  i               2    6[COMRAM] int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   897 ;;      Params:         2       0       0       0       0       0       0       0       0
   898 ;;      Locals:         2       0       0       0       0       0       0       0       0
   899 ;;      Temps:          0       0       0       0       0       0       0       0       0
   900 ;;      Totals:         4       0       0       0       0       0       0       0       0
   901 ;;Total ram usage:        4 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    2
   904 ;; This function calls:
   905 ;;		_Lcd_Write_Char
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text4
   912  000CE8                     __ptext4:
   913                           	callstack 0
   914  000CE8                     _Lcd_Write_String:
   915                           	callstack 28
   916  000CE8                     
   917                           ;lcd.h: 162: int i;;lcd.h: 163: for(i=0;a[i]!='\0';i++)
   918  000CE8  0E00               	movlw	0
   919  000CEA  6E2A               	movwf	(Lcd_Write_String@i+1)^0,c
   920  000CEC  0E00               	movlw	0
   921  000CEE  6E29               	movwf	Lcd_Write_String@i^0,c
   922  000CF0  EF85  F006         	goto	l1163
   923  000CF4                     l1159:
   924                           
   925                           ;lcd.h: 164: Lcd_Write_Char(a[i]);
   926  000CF4  5029               	movf	Lcd_Write_String@i^0,w,c
   927  000CF6  2427               	addwf	Lcd_Write_String@a^0,w,c
   928  000CF8  6ED9               	movwf	fsr2l,c
   929  000CFA  502A               	movf	(Lcd_Write_String@i+1)^0,w,c
   930  000CFC  2028               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   931  000CFE  6EDA               	movwf	fsr2h,c
   932  000D00  50DF               	movf	indf2,w,c
   933  000D02  EC94  F006         	call	_Lcd_Write_Char
   934  000D06  4A29               	infsnz	Lcd_Write_String@i^0,f,c
   935  000D08  2A2A               	incf	(Lcd_Write_String@i+1)^0,f,c
   936  000D0A                     l1163:
   937  000D0A  5029               	movf	Lcd_Write_String@i^0,w,c
   938  000D0C  2427               	addwf	Lcd_Write_String@a^0,w,c
   939  000D0E  6ED9               	movwf	fsr2l,c
   940  000D10  502A               	movf	(Lcd_Write_String@i+1)^0,w,c
   941  000D12  2028               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   942  000D14  6EDA               	movwf	fsr2h,c
   943  000D16  50DF               	movf	indf2,w,c
   944  000D18  A4D8               	btfss	status,2,c
   945  000D1A  EF91  F006         	goto	u351
   946  000D1E  EF93  F006         	goto	u350
   947  000D22                     u351:
   948  000D22  EF7A  F006         	goto	l1159
   949  000D26                     u350:
   950  000D26  0012               	return		;funcret
   951  000D28                     __end_of_Lcd_Write_String:
   952                           	callstack 0
   953                           
   954 ;; *************** function _Lcd_Write_Char *****************
   955 ;; Defined at:
   956 ;;		line 144 in file "lcd.h"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  a               1    wreg     unsigned char 
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  a               1    3[COMRAM] unsigned char 
   961 ;;  y               1    2[COMRAM] unsigned char 
   962 ;;  temp            1    1[COMRAM] unsigned char 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   972 ;;      Params:         0       0       0       0       0       0       0       0       0
   973 ;;      Locals:         3       0       0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0       0
   975 ;;      Totals:         3       0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        3 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    1
   979 ;; This function calls:
   980 ;;		_Lcd_Port
   981 ;; This function is called by:
   982 ;;		_Lcd_Write_String
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text5
   987  000D28                     __ptext5:
   988                           	callstack 0
   989  000D28                     _Lcd_Write_Char:
   990                           	callstack 28
   991                           
   992                           ;incstack = 0
   993                           ;Lcd_Write_Char@a stored from wreg
   994  000D28  6E26               	movwf	Lcd_Write_Char@a^0,c
   995  000D2A                     
   996                           ;lcd.h: 146: char temp,y;;lcd.h: 147: temp = a&0x0F;
   997  000D2A  5026               	movf	Lcd_Write_Char@a^0,w,c
   998  000D2C  0B0F               	andlw	15
   999  000D2E  6E24               	movwf	Lcd_Write_Char@temp^0,c
  1000                           
  1001                           ;lcd.h: 148: y = a&0xF0;
  1002  000D30  5026               	movf	Lcd_Write_Char@a^0,w,c
  1003  000D32  0BF0               	andlw	240
  1004  000D34  6E25               	movwf	Lcd_Write_Char@y^0,c
  1005  000D36                     
  1006                           ;lcd.h: 149: RD2 = 1;
  1007  000D36  8483               	bsf	3971,2,c	;volatile
  1008  000D38                     
  1009                           ;lcd.h: 150: Lcd_Port(y>>4);
  1010  000D38  3825               	swapf	Lcd_Write_Char@y^0,w,c
  1011  000D3A  0B0F               	andlw	15
  1012  000D3C  EC46  F006         	call	_Lcd_Port
  1013  000D40                     
  1014                           ;lcd.h: 151: RD3 = 1;
  1015  000D40  8683               	bsf	3971,3,c	;volatile
  1016  000D42                     
  1017                           ;lcd.h: 152: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1018  000D42  0E0D               	movlw	13
  1019  000D44                     u467:
  1020  000D44  2EE8               	decfsz	wreg,f,c
  1021  000D46  D7FE               	bra	u467
  1022  000D48  F000               	nop	
  1023  000D4A                     
  1024                           ;lcd.h: 153: RD3 = 0;
  1025  000D4A  9683               	bcf	3971,3,c	;volatile
  1026  000D4C                     
  1027                           ;lcd.h: 154: Lcd_Port(temp);
  1028  000D4C  5024               	movf	Lcd_Write_Char@temp^0,w,c
  1029  000D4E  EC46  F006         	call	_Lcd_Port
  1030  000D52                     
  1031                           ;lcd.h: 155: RD3 = 1;
  1032  000D52  8683               	bsf	3971,3,c	;volatile
  1033  000D54                     
  1034                           ;lcd.h: 156: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1035  000D54  0E0D               	movlw	13
  1036  000D56                     u477:
  1037  000D56  2EE8               	decfsz	wreg,f,c
  1038  000D58  D7FE               	bra	u477
  1039  000D5A  F000               	nop	
  1040  000D5C                     
  1041                           ;lcd.h: 157: RD3 = 0;
  1042  000D5C  9683               	bcf	3971,3,c	;volatile
  1043  000D5E  0012               	return		;funcret
  1044  000D60                     __end_of_Lcd_Write_Char:
  1045                           	callstack 0
  1046                           
  1047 ;; *************** function _Lcd_Set_Cursor *****************
  1048 ;; Defined at:
  1049 ;;		line 86 in file "lcd.h"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  a               1    wreg     unsigned char 
  1052 ;;  b               1    3[COMRAM] unsigned char 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  a               1    4[COMRAM] unsigned char 
  1055 ;;  temp            1    7[COMRAM] unsigned char 
  1056 ;;  y               1    6[COMRAM] unsigned char 
  1057 ;;  z               1    5[COMRAM] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1067 ;;      Params:         1       0       0       0       0       0       0       0       0
  1068 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1069 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1070 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    2
  1074 ;; This function calls:
  1075 ;;		_Lcd_Cmd
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text6
  1082  0009C8                     __ptext6:
  1083                           	callstack 0
  1084  0009C8                     _Lcd_Set_Cursor:
  1085                           	callstack 28
  1086                           
  1087                           ;incstack = 0
  1088                           ;Lcd_Set_Cursor@a stored from wreg
  1089  0009C8  6E27               	movwf	Lcd_Set_Cursor@a^0,c
  1090  0009CA                     
  1091                           ;lcd.h: 88: char temp,z,y;;lcd.h: 89: if(a == 1)
  1092  0009CA  0427               	decf	Lcd_Set_Cursor@a^0,w,c
  1093  0009CC  A4D8               	btfss	status,2,c
  1094  0009CE  EFEB  F004         	goto	u311
  1095  0009D2  EFED  F004         	goto	u310
  1096  0009D6                     u311:
  1097  0009D6  EFFE  F004         	goto	l1133
  1098  0009DA                     u310:
  1099  0009DA                     
  1100                           ;lcd.h: 90: {;lcd.h: 91: temp = 0x80 + b - 1;
  1101  0009DA  5026               	movf	Lcd_Set_Cursor@b^0,w,c
  1102  0009DC  0F7F               	addlw	127
  1103  0009DE  6E2A               	movwf	Lcd_Set_Cursor@temp^0,c
  1104                           
  1105                           ;lcd.h: 92: z = temp>>4;
  1106  0009E0  382A               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1107  0009E2  0B0F               	andlw	15
  1108  0009E4  6E28               	movwf	Lcd_Set_Cursor@z^0,c
  1109                           
  1110                           ;lcd.h: 93: y = temp & 0x0F;
  1111  0009E6  502A               	movf	Lcd_Set_Cursor@temp^0,w,c
  1112  0009E8  0B0F               	andlw	15
  1113  0009EA  6E29               	movwf	Lcd_Set_Cursor@y^0,c
  1114  0009EC                     
  1115                           ;lcd.h: 94: Lcd_Cmd(z);
  1116  0009EC  5028               	movf	Lcd_Set_Cursor@z^0,w,c
  1117  0009EE  ECB0  F006         	call	_Lcd_Cmd
  1118  0009F2                     
  1119                           ;lcd.h: 95: Lcd_Cmd(y);
  1120  0009F2  5029               	movf	Lcd_Set_Cursor@y^0,w,c
  1121  0009F4  ECB0  F006         	call	_Lcd_Cmd
  1122                           
  1123                           ;lcd.h: 96: }
  1124  0009F8  EF4C  F005         	goto	l49
  1125  0009FC                     l1133:
  1126                           
  1127                           ;lcd.h: 97: else if(a == 2)
  1128  0009FC  0E02               	movlw	2
  1129  0009FE  1827               	xorwf	Lcd_Set_Cursor@a^0,w,c
  1130  000A00  A4D8               	btfss	status,2,c
  1131  000A02  EF05  F005         	goto	u321
  1132  000A06  EF07  F005         	goto	u320
  1133  000A0A                     u321:
  1134  000A0A  EF18  F005         	goto	l1141
  1135  000A0E                     u320:
  1136  000A0E                     
  1137                           ;lcd.h: 98: {;lcd.h: 99: temp = 0xC0 + b - 1;
  1138  000A0E  5026               	movf	Lcd_Set_Cursor@b^0,w,c
  1139  000A10  0FBF               	addlw	191
  1140  000A12  6E2A               	movwf	Lcd_Set_Cursor@temp^0,c
  1141                           
  1142                           ;lcd.h: 100: z = temp>>4;
  1143  000A14  382A               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1144  000A16  0B0F               	andlw	15
  1145  000A18  6E28               	movwf	Lcd_Set_Cursor@z^0,c
  1146                           
  1147                           ;lcd.h: 101: y = temp & 0x0F;
  1148  000A1A  502A               	movf	Lcd_Set_Cursor@temp^0,w,c
  1149  000A1C  0B0F               	andlw	15
  1150  000A1E  6E29               	movwf	Lcd_Set_Cursor@y^0,c
  1151  000A20                     
  1152                           ;lcd.h: 102: Lcd_Cmd(z);
  1153  000A20  5028               	movf	Lcd_Set_Cursor@z^0,w,c
  1154  000A22  ECB0  F006         	call	_Lcd_Cmd
  1155  000A26                     
  1156                           ;lcd.h: 103: Lcd_Cmd(y);
  1157  000A26  5029               	movf	Lcd_Set_Cursor@y^0,w,c
  1158  000A28  ECB0  F006         	call	_Lcd_Cmd
  1159                           
  1160                           ;lcd.h: 104: }
  1161  000A2C  EF4C  F005         	goto	l49
  1162  000A30                     l1141:
  1163                           
  1164                           ;lcd.h: 105: else if(a == 3)
  1165  000A30  0E03               	movlw	3
  1166  000A32  1827               	xorwf	Lcd_Set_Cursor@a^0,w,c
  1167  000A34  A4D8               	btfss	status,2,c
  1168  000A36  EF1F  F005         	goto	u331
  1169  000A3A  EF21  F005         	goto	u330
  1170  000A3E                     u331:
  1171  000A3E  EF32  F005         	goto	l1149
  1172  000A42                     u330:
  1173  000A42                     
  1174                           ;lcd.h: 106: {;lcd.h: 107: temp = 0x94 + b - 1;
  1175  000A42  5026               	movf	Lcd_Set_Cursor@b^0,w,c
  1176  000A44  0F93               	addlw	147
  1177  000A46  6E2A               	movwf	Lcd_Set_Cursor@temp^0,c
  1178                           
  1179                           ;lcd.h: 108: z = temp>>4;
  1180  000A48  382A               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1181  000A4A  0B0F               	andlw	15
  1182  000A4C  6E28               	movwf	Lcd_Set_Cursor@z^0,c
  1183                           
  1184                           ;lcd.h: 109: y = temp & 0x0F;
  1185  000A4E  502A               	movf	Lcd_Set_Cursor@temp^0,w,c
  1186  000A50  0B0F               	andlw	15
  1187  000A52  6E29               	movwf	Lcd_Set_Cursor@y^0,c
  1188  000A54                     
  1189                           ;lcd.h: 110: Lcd_Cmd(z);
  1190  000A54  5028               	movf	Lcd_Set_Cursor@z^0,w,c
  1191  000A56  ECB0  F006         	call	_Lcd_Cmd
  1192  000A5A                     
  1193                           ;lcd.h: 111: Lcd_Cmd(y);
  1194  000A5A  5029               	movf	Lcd_Set_Cursor@y^0,w,c
  1195  000A5C  ECB0  F006         	call	_Lcd_Cmd
  1196                           
  1197                           ;lcd.h: 112: }
  1198  000A60  EF4C  F005         	goto	l49
  1199  000A64                     l1149:
  1200                           
  1201                           ;lcd.h: 113: else if(a == 4)
  1202  000A64  0E04               	movlw	4
  1203  000A66  1827               	xorwf	Lcd_Set_Cursor@a^0,w,c
  1204  000A68  A4D8               	btfss	status,2,c
  1205  000A6A  EF39  F005         	goto	u341
  1206  000A6E  EF3B  F005         	goto	u340
  1207  000A72                     u341:
  1208  000A72  EF4C  F005         	goto	l45
  1209  000A76                     u340:
  1210  000A76                     
  1211                           ;lcd.h: 114: {;lcd.h: 115: temp = 0xD4 + b - 1;
  1212  000A76  5026               	movf	Lcd_Set_Cursor@b^0,w,c
  1213  000A78  0FD3               	addlw	211
  1214  000A7A  6E2A               	movwf	Lcd_Set_Cursor@temp^0,c
  1215                           
  1216                           ;lcd.h: 116: z = temp>>4;
  1217  000A7C  382A               	swapf	Lcd_Set_Cursor@temp^0,w,c
  1218  000A7E  0B0F               	andlw	15
  1219  000A80  6E28               	movwf	Lcd_Set_Cursor@z^0,c
  1220                           
  1221                           ;lcd.h: 117: y = temp & 0x0F;
  1222  000A82  502A               	movf	Lcd_Set_Cursor@temp^0,w,c
  1223  000A84  0B0F               	andlw	15
  1224  000A86  6E29               	movwf	Lcd_Set_Cursor@y^0,c
  1225  000A88                     
  1226                           ;lcd.h: 118: Lcd_Cmd(z);
  1227  000A88  5028               	movf	Lcd_Set_Cursor@z^0,w,c
  1228  000A8A  ECB0  F006         	call	_Lcd_Cmd
  1229  000A8E                     
  1230                           ;lcd.h: 119: Lcd_Cmd(y);
  1231  000A8E  5029               	movf	Lcd_Set_Cursor@y^0,w,c
  1232  000A90  ECB0  F006         	call	_Lcd_Cmd
  1233  000A94  EF4C  F005         	goto	l49
  1234  000A98                     l45:
  1235  000A98                     l49:
  1236  000A98  0012               	return		;funcret
  1237  000A9A                     __end_of_Lcd_Set_Cursor:
  1238                           	callstack 0
  1239                           
  1240 ;; *************** function _Lcd_Init *****************
  1241 ;; Defined at:
  1242 ;;		line 125 in file "lcd.h"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        1 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    2
  1263 ;; This function calls:
  1264 ;;		_Lcd_Cmd
  1265 ;;		_Lcd_Port
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text7
  1272  000BB6                     __ptext7:
  1273                           	callstack 0
  1274  000BB6                     _Lcd_Init:
  1275                           	callstack 28
  1276  000BB6                     
  1277                           ;lcd.h: 127: Lcd_Port(0x00);
  1278  000BB6  0E00               	movlw	0
  1279  000BB8  EC46  F006         	call	_Lcd_Port
  1280  000BBC                     
  1281                           ;lcd.h: 128: _delay((unsigned long)((20)*(4000000/4000.0)));
  1282  000BBC  0E1A               	movlw	26
  1283  000BBE  6E26               	movwf	??_Lcd_Init^0,c
  1284  000BC0  0EF8               	movlw	248
  1285  000BC2                     u487:
  1286  000BC2  2EE8               	decfsz	wreg,f,c
  1287  000BC4  D7FE               	bra	u487
  1288  000BC6  2E26               	decfsz	??_Lcd_Init^0,f,c
  1289  000BC8  D7FC               	bra	u487
  1290  000BCA  D000               	nop2	
  1291  000BCC                     
  1292                           ;lcd.h: 129: Lcd_Cmd(0x03);
  1293  000BCC  0E03               	movlw	3
  1294  000BCE  ECB0  F006         	call	_Lcd_Cmd
  1295  000BD2                     
  1296                           ;lcd.h: 130: _delay((unsigned long)((5)*(4000000/4000.0)));
  1297  000BD2  0E07               	movlw	7
  1298  000BD4  6E26               	movwf	??_Lcd_Init^0,c
  1299  000BD6  0E7D               	movlw	125
  1300  000BD8                     u497:
  1301  000BD8  2EE8               	decfsz	wreg,f,c
  1302  000BDA  D7FE               	bra	u497
  1303  000BDC  2E26               	decfsz	??_Lcd_Init^0,f,c
  1304  000BDE  D7FC               	bra	u497
  1305  000BE0  F000               	nop	
  1306  000BE2                     
  1307                           ;lcd.h: 131: Lcd_Cmd(0x03);
  1308  000BE2  0E03               	movlw	3
  1309  000BE4  ECB0  F006         	call	_Lcd_Cmd
  1310  000BE8                     
  1311                           ;lcd.h: 132: _delay((unsigned long)((11)*(4000000/4000.0)));
  1312  000BE8  0E0F               	movlw	15
  1313  000BEA  6E26               	movwf	??_Lcd_Init^0,c
  1314  000BEC  0E48               	movlw	72
  1315  000BEE                     u507:
  1316  000BEE  2EE8               	decfsz	wreg,f,c
  1317  000BF0  D7FE               	bra	u507
  1318  000BF2  2E26               	decfsz	??_Lcd_Init^0,f,c
  1319  000BF4  D7FC               	bra	u507
  1320  000BF6                     
  1321                           ;lcd.h: 133: Lcd_Cmd(0x03);
  1322  000BF6  0E03               	movlw	3
  1323  000BF8  ECB0  F006         	call	_Lcd_Cmd
  1324  000BFC                     
  1325                           ;lcd.h: 135: Lcd_Cmd(0x02);
  1326  000BFC  0E02               	movlw	2
  1327  000BFE  ECB0  F006         	call	_Lcd_Cmd
  1328  000C02                     
  1329                           ;lcd.h: 136: Lcd_Cmd(0x02);
  1330  000C02  0E02               	movlw	2
  1331  000C04  ECB0  F006         	call	_Lcd_Cmd
  1332  000C08                     
  1333                           ;lcd.h: 137: Lcd_Cmd(0x08);
  1334  000C08  0E08               	movlw	8
  1335  000C0A  ECB0  F006         	call	_Lcd_Cmd
  1336  000C0E                     
  1337                           ;lcd.h: 138: Lcd_Cmd(0x00);
  1338  000C0E  0E00               	movlw	0
  1339  000C10  ECB0  F006         	call	_Lcd_Cmd
  1340  000C14                     
  1341                           ;lcd.h: 139: Lcd_Cmd(0x0C);
  1342  000C14  0E0C               	movlw	12
  1343  000C16  ECB0  F006         	call	_Lcd_Cmd
  1344  000C1A                     
  1345                           ;lcd.h: 140: Lcd_Cmd(0x00);
  1346  000C1A  0E00               	movlw	0
  1347  000C1C  ECB0  F006         	call	_Lcd_Cmd
  1348  000C20                     
  1349                           ;lcd.h: 141: Lcd_Cmd(0x06);
  1350  000C20  0E06               	movlw	6
  1351  000C22  ECB0  F006         	call	_Lcd_Cmd
  1352  000C26  0012               	return		;funcret
  1353  000C28                     __end_of_Lcd_Init:
  1354                           	callstack 0
  1355                           
  1356 ;; *************** function _Lcd_Cmd *****************
  1357 ;; Defined at:
  1358 ;;		line 69 in file "lcd.h"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  a               1    wreg     unsigned char 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  a               1    2[COMRAM] unsigned char 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0
  1373 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1374 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1375 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    1
  1379 ;; This function calls:
  1380 ;;		_Lcd_Port
  1381 ;; This function is called by:
  1382 ;;		_Lcd_Set_Cursor
  1383 ;;		_Lcd_Init
  1384 ;;		_Lcd_Clear
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text8
  1389  000D60                     __ptext8:
  1390                           	callstack 0
  1391  000D60                     _Lcd_Cmd:
  1392                           	callstack 28
  1393                           
  1394                           ;incstack = 0
  1395                           ;Lcd_Cmd@a stored from wreg
  1396  000D60  6E25               	movwf	Lcd_Cmd@a^0,c
  1397  000D62                     
  1398                           ;lcd.h: 71: RD2 = 0;
  1399  000D62  9483               	bcf	3971,2,c	;volatile
  1400  000D64                     
  1401                           ;lcd.h: 72: Lcd_Port(a);
  1402  000D64  5025               	movf	Lcd_Cmd@a^0,w,c
  1403  000D66  EC46  F006         	call	_Lcd_Port
  1404  000D6A                     
  1405                           ;lcd.h: 73: RD3 = 1;
  1406  000D6A  8683               	bsf	3971,3,c	;volatile
  1407  000D6C                     
  1408                           ;lcd.h: 74: _delay((unsigned long)((4)*(4000000/4000.0)));
  1409  000D6C  0E06               	movlw	6
  1410  000D6E  6E24               	movwf	??_Lcd_Cmd^0,c
  1411  000D70  0E30               	movlw	48
  1412  000D72                     u517:
  1413  000D72  2EE8               	decfsz	wreg,f,c
  1414  000D74  D7FE               	bra	u517
  1415  000D76  2E24               	decfsz	??_Lcd_Cmd^0,f,c
  1416  000D78  D7FC               	bra	u517
  1417  000D7A  D000               	nop2	
  1418  000D7C                     
  1419                           ;lcd.h: 75: RD3 = 0;
  1420  000D7C  9683               	bcf	3971,3,c	;volatile
  1421  000D7E  0012               	return		;funcret
  1422  000D80                     __end_of_Lcd_Cmd:
  1423                           	callstack 0
  1424                           
  1425 ;; *************** function _Lcd_Port *****************
  1426 ;; Defined at:
  1427 ;;		line 47 in file "lcd.h"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  a               1    wreg     unsigned char 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  a               1    0[COMRAM] unsigned char 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      void 
  1434 ;; Registers used:
  1435 ;;		wreg
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1441 ;;      Params:         0       0       0       0       0       0       0       0       0
  1442 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1444 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1445 ;;Total ram usage:        1 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_Lcd_Cmd
  1451 ;;		_Lcd_Init
  1452 ;;		_Lcd_Write_Char
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text9
  1457  000C8C                     __ptext9:
  1458                           	callstack 0
  1459  000C8C                     _Lcd_Port:
  1460                           	callstack 28
  1461                           
  1462                           ;incstack = 0
  1463                           ;Lcd_Port@a stored from wreg
  1464  000C8C  6E23               	movwf	Lcd_Port@a^0,c
  1465  000C8E                     
  1466                           ;lcd.h: 49: if(a & 1)
  1467  000C8E  A023               	btfss	Lcd_Port@a^0,0,c
  1468  000C90  EF4C  F006         	goto	u11
  1469  000C94  EF4E  F006         	goto	u10
  1470  000C98                     u11:
  1471  000C98  EF51  F006         	goto	l25
  1472  000C9C                     u10:
  1473  000C9C                     
  1474                           ;lcd.h: 50: RD4 = 1;
  1475  000C9C  8883               	bsf	3971,4,c	;volatile
  1476  000C9E  EF52  F006         	goto	l855
  1477  000CA2                     l25:
  1478                           
  1479                           ;lcd.h: 51: else;lcd.h: 52: RD4 = 0;
  1480  000CA2  9883               	bcf	3971,4,c	;volatile
  1481  000CA4                     l855:
  1482                           
  1483                           ;lcd.h: 54: if(a & 2)
  1484  000CA4  A223               	btfss	Lcd_Port@a^0,1,c
  1485  000CA6  EF57  F006         	goto	u21
  1486  000CAA  EF59  F006         	goto	u20
  1487  000CAE                     u21:
  1488  000CAE  EF5C  F006         	goto	l27
  1489  000CB2                     u20:
  1490  000CB2                     
  1491                           ;lcd.h: 55: RD5 = 1;
  1492  000CB2  8A83               	bsf	3971,5,c	;volatile
  1493  000CB4  EF5D  F006         	goto	l859
  1494  000CB8                     l27:
  1495                           
  1496                           ;lcd.h: 56: else;lcd.h: 57: RD5 = 0;
  1497  000CB8  9A83               	bcf	3971,5,c	;volatile
  1498  000CBA                     l859:
  1499                           
  1500                           ;lcd.h: 59: if(a & 4)
  1501  000CBA  A423               	btfss	Lcd_Port@a^0,2,c
  1502  000CBC  EF62  F006         	goto	u31
  1503  000CC0  EF64  F006         	goto	u30
  1504  000CC4                     u31:
  1505  000CC4  EF67  F006         	goto	l29
  1506  000CC8                     u30:
  1507  000CC8                     
  1508                           ;lcd.h: 60: RD6 = 1;
  1509  000CC8  8C83               	bsf	3971,6,c	;volatile
  1510  000CCA  EF68  F006         	goto	l863
  1511  000CCE                     l29:
  1512                           
  1513                           ;lcd.h: 61: else;lcd.h: 62: RD6 = 0;
  1514  000CCE  9C83               	bcf	3971,6,c	;volatile
  1515  000CD0                     l863:
  1516                           
  1517                           ;lcd.h: 64: if(a & 8)
  1518  000CD0  A623               	btfss	Lcd_Port@a^0,3,c
  1519  000CD2  EF6D  F006         	goto	u41
  1520  000CD6  EF6F  F006         	goto	u40
  1521  000CDA                     u41:
  1522  000CDA  EF72  F006         	goto	l31
  1523  000CDE                     u40:
  1524  000CDE                     
  1525                           ;lcd.h: 65: RD7 = 1;
  1526  000CDE  8E83               	bsf	3971,7,c	;volatile
  1527  000CE0  EF73  F006         	goto	l33
  1528  000CE4                     l31:
  1529                           
  1530                           ;lcd.h: 66: else;lcd.h: 67: RD7 = 0;
  1531  000CE4  9E83               	bcf	3971,7,c	;volatile
  1532  000CE6                     l33:
  1533  000CE6  0012               	return		;funcret
  1534  000CE8                     __end_of_Lcd_Port:
  1535                           	callstack 0
  1536                           
  1537                           	psect	rparam
  1538  0000                     
  1539                           	psect	idloc
  1540                           
  1541                           ;Config register IDLOC0 @ 0x200000
  1542                           ;	unspecified, using default values
  1543  200000                     	org	2097152
  1544  200000  FF                 	db	255
  1545                           
  1546                           ;Config register IDLOC1 @ 0x200001
  1547                           ;	unspecified, using default values
  1548  200001                     	org	2097153
  1549  200001  FF                 	db	255
  1550                           
  1551                           ;Config register IDLOC2 @ 0x200002
  1552                           ;	unspecified, using default values
  1553  200002                     	org	2097154
  1554  200002  FF                 	db	255
  1555                           
  1556                           ;Config register IDLOC3 @ 0x200003
  1557                           ;	unspecified, using default values
  1558  200003                     	org	2097155
  1559  200003  FF                 	db	255
  1560                           
  1561                           ;Config register IDLOC4 @ 0x200004
  1562                           ;	unspecified, using default values
  1563  200004                     	org	2097156
  1564  200004  FF                 	db	255
  1565                           
  1566                           ;Config register IDLOC5 @ 0x200005
  1567                           ;	unspecified, using default values
  1568  200005                     	org	2097157
  1569  200005  FF                 	db	255
  1570                           
  1571                           ;Config register IDLOC6 @ 0x200006
  1572                           ;	unspecified, using default values
  1573  200006                     	org	2097158
  1574  200006  FF                 	db	255
  1575                           
  1576                           ;Config register IDLOC7 @ 0x200007
  1577                           ;	unspecified, using default values
  1578  200007                     	org	2097159
  1579  200007  FF                 	db	255
  1580                           
  1581                           	psect	config
  1582                           
  1583                           ;Config register CONFIG1L @ 0x300000
  1584                           ;	unspecified, using default values
  1585                           ;	PLL Prescaler Selection bits
  1586                           ;	PLLDIV = 0x0, unprogrammed default
  1587                           ;	System Clock Postscaler Selection bits
  1588                           ;	CPUDIV = 0x0, unprogrammed default
  1589                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1590                           ;	USBDIV = 0x0, unprogrammed default
  1591  300000                     	org	3145728
  1592  300000  00                 	db	0
  1593                           
  1594                           ;Config register CONFIG1H @ 0x300001
  1595                           ;	Oscillator Selection bits
  1596                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1597                           ;	Fail-Safe Clock Monitor Enable bit
  1598                           ;	FCMEN = 0x0, unprogrammed default
  1599                           ;	Internal/External Oscillator Switchover bit
  1600                           ;	IESO = 0x0, unprogrammed default
  1601  300001                     	org	3145729
  1602  300001  09                 	db	9
  1603                           
  1604                           ;Config register CONFIG2L @ 0x300002
  1605                           ;	unspecified, using default values
  1606                           ;	Power-up Timer Enable bit
  1607                           ;	PWRT = 0x1, unprogrammed default
  1608                           ;	Brown-out Reset Enable bits
  1609                           ;	BOR = 0x3, unprogrammed default
  1610                           ;	Brown-out Reset Voltage bits
  1611                           ;	BORV = 0x3, unprogrammed default
  1612                           ;	USB Voltage Regulator Enable bit
  1613                           ;	VREGEN = 0x0, unprogrammed default
  1614  300002                     	org	3145730
  1615  300002  1F                 	db	31
  1616                           
  1617                           ;Config register CONFIG2H @ 0x300003
  1618                           ;	Watchdog Timer Enable bit
  1619                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1620                           ;	Watchdog Timer Postscale Select bits
  1621                           ;	WDTPS = 0xF, unprogrammed default
  1622  300003                     	org	3145731
  1623  300003  1E                 	db	30
  1624                           
  1625                           ; Padding undefined space
  1626  300004                     	org	3145732
  1627  300004  FF                 	db	255
  1628                           
  1629                           ;Config register CONFIG3H @ 0x300005
  1630                           ;	CCP2 MUX bit
  1631                           ;	CCP2MX = 0x1, unprogrammed default
  1632                           ;	PORTB A/D Enable bit
  1633                           ;	PBADEN = 0x1, unprogrammed default
  1634                           ;	Low-Power Timer 1 Oscillator Enable bit
  1635                           ;	LPT1OSC = 0x0, unprogrammed default
  1636                           ;	MCLR Pin Enable bit
  1637                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1638  300005                     	org	3145733
  1639  300005  03                 	db	3
  1640                           
  1641                           ;Config register CONFIG4L @ 0x300006
  1642                           ;	unspecified, using default values
  1643                           ;	Stack Full/Underflow Reset Enable bit
  1644                           ;	STVREN = 0x1, unprogrammed default
  1645                           ;	Single-Supply ICSP Enable bit
  1646                           ;	LVP = 0x1, unprogrammed default
  1647                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1648                           ;	ICPRT = 0x0, unprogrammed default
  1649                           ;	Extended Instruction Set Enable bit
  1650                           ;	XINST = 0x0, unprogrammed default
  1651                           ;	Background Debugger Enable bit
  1652                           ;	DEBUG = 0x1, unprogrammed default
  1653  300006                     	org	3145734
  1654  300006  85                 	db	133
  1655                           
  1656                           ; Padding undefined space
  1657  300007                     	org	3145735
  1658  300007  FF                 	db	255
  1659                           
  1660                           ;Config register CONFIG5L @ 0x300008
  1661                           ;	unspecified, using default values
  1662                           ;	Code Protection bit
  1663                           ;	CP0 = 0x1, unprogrammed default
  1664                           ;	Code Protection bit
  1665                           ;	CP1 = 0x1, unprogrammed default
  1666                           ;	Code Protection bit
  1667                           ;	CP2 = 0x1, unprogrammed default
  1668                           ;	Code Protection bit
  1669                           ;	CP3 = 0x1, unprogrammed default
  1670  300008                     	org	3145736
  1671  300008  0F                 	db	15
  1672                           
  1673                           ;Config register CONFIG5H @ 0x300009
  1674                           ;	unspecified, using default values
  1675                           ;	Boot Block Code Protection bit
  1676                           ;	CPB = 0x1, unprogrammed default
  1677                           ;	Data EEPROM Code Protection bit
  1678                           ;	CPD = 0x1, unprogrammed default
  1679  300009                     	org	3145737
  1680  300009  C0                 	db	192
  1681                           
  1682                           ;Config register CONFIG6L @ 0x30000A
  1683                           ;	unspecified, using default values
  1684                           ;	Write Protection bit
  1685                           ;	WRT0 = 0x1, unprogrammed default
  1686                           ;	Write Protection bit
  1687                           ;	WRT1 = 0x1, unprogrammed default
  1688                           ;	Write Protection bit
  1689                           ;	WRT2 = 0x1, unprogrammed default
  1690                           ;	Write Protection bit
  1691                           ;	WRT3 = 0x1, unprogrammed default
  1692  30000A                     	org	3145738
  1693  30000A  0F                 	db	15
  1694                           
  1695                           ;Config register CONFIG6H @ 0x30000B
  1696                           ;	unspecified, using default values
  1697                           ;	Configuration Register Write Protection bit
  1698                           ;	WRTC = 0x1, unprogrammed default
  1699                           ;	Boot Block Write Protection bit
  1700                           ;	WRTB = 0x1, unprogrammed default
  1701                           ;	Data EEPROM Write Protection bit
  1702                           ;	WRTD = 0x1, unprogrammed default
  1703  30000B                     	org	3145739
  1704  30000B  E0                 	db	224
  1705                           
  1706                           ;Config register CONFIG7L @ 0x30000C
  1707                           ;	unspecified, using default values
  1708                           ;	Table Read Protection bit
  1709                           ;	EBTR0 = 0x1, unprogrammed default
  1710                           ;	Table Read Protection bit
  1711                           ;	EBTR1 = 0x1, unprogrammed default
  1712                           ;	Table Read Protection bit
  1713                           ;	EBTR2 = 0x1, unprogrammed default
  1714                           ;	Table Read Protection bit
  1715                           ;	EBTR3 = 0x1, unprogrammed default
  1716  30000C                     	org	3145740
  1717  30000C  0F                 	db	15
  1718                           
  1719                           ;Config register CONFIG7H @ 0x30000D
  1720                           ;	unspecified, using default values
  1721                           ;	Boot Block Table Read Protection bit
  1722                           ;	EBTRB = 0x1, unprogrammed default
  1723  30000D                     	org	3145741
  1724  30000D  40                 	db	64
  1725                           tosu	equ	0xFFF
  1726                           tosh	equ	0xFFE
  1727                           tosl	equ	0xFFD
  1728                           stkptr	equ	0xFFC
  1729                           pclatu	equ	0xFFB
  1730                           pclath	equ	0xFFA
  1731                           pcl	equ	0xFF9
  1732                           tblptru	equ	0xFF8
  1733                           tblptrh	equ	0xFF7
  1734                           tblptrl	equ	0xFF6
  1735                           tablat	equ	0xFF5
  1736                           prodh	equ	0xFF4
  1737                           prodl	equ	0xFF3
  1738                           indf0	equ	0xFEF
  1739                           postinc0	equ	0xFEE
  1740                           postdec0	equ	0xFED
  1741                           preinc0	equ	0xFEC
  1742                           plusw0	equ	0xFEB
  1743                           fsr0h	equ	0xFEA
  1744                           fsr0l	equ	0xFE9
  1745                           wreg	equ	0xFE8
  1746                           indf1	equ	0xFE7
  1747                           postinc1	equ	0xFE6
  1748                           postdec1	equ	0xFE5
  1749                           preinc1	equ	0xFE4
  1750                           plusw1	equ	0xFE3
  1751                           fsr1h	equ	0xFE2
  1752                           fsr1l	equ	0xFE1
  1753                           bsr	equ	0xFE0
  1754                           indf2	equ	0xFDF
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           preinc2	equ	0xFDC
  1758                           plusw2	equ	0xFDB
  1759                           fsr2h	equ	0xFDA
  1760                           fsr2l	equ	0xFD9
  1761                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    10
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(COMRAM[16]), linha1(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(COMRAM[16]), linha1(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2670
                                             26 COMRAM     2     2      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1406
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     362
                                              4 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     767
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1C      3E       1       65.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      20        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat Sep 25 22:10:23 2021

                       l31 0CE4                         l33 0CE6                         l25 0CA2  
                       l27 0CB8                         l36 0D7E                         l52 0C26  
                       l29 0CCE                         l45 0A98                         l61 0D26  
                       l55 0D5E                         l49 0A98                         u10 0C9C  
                       u11 0C98                         u20 0CB2                         u21 0CAE  
                       u30 0CC8                         u31 0CC4                         u40 0CDE  
                       u41 0CDA                        l103 09C6                        l602 0C8A  
                      l592 0BB4                        l585 0BAC                        l851 0C8E  
                      l595 0C82                        l861 0CC8                        l853 0C9C  
                      l863 0CD0                        l855 0CA4                        l871 0D6A  
                      l865 0CDE                        l857 0CB2                        l873 0D6C  
                      l881 0D38                        l859 0CBA                        l875 0D7C  
                      l867 0D62                        l971 0BCC                        l891 0D52  
                      l883 0D40                        l869 0D64                        l981 0BFC  
                      l973 0BD2                        l893 0D54                        l885 0D42  
                      l877 0D2A                        l991 0C1A                        l983 0C02  
                      l975 0BE2                        l967 0BB6                        l895 0D5C  
                      l887 0D4A                        l879 0D36                        l993 0C20  
                      l985 0C08                        l977 0BE8                        l969 0BBC  
                      l889 0D4C                        l987 0C0E                        l979 0BF6  
                      l989 0C14                        _RD2 007C1A                        _RD3 007C1B  
                      _RD4 007C1C                        _RD5 007C1D                        _RD6 007C1E  
                      _RD7 007C1F                        u300 0C6E                        u301 0C6A  
                      u310 09DA                        u311 09D6                        u320 0A0E  
                      u400 091C                        u321 0A0A                        u401 0918  
                      u330 0A42                        u250 0B5C                        u410 0998  
                      u331 0A3E                        u251 0B58                        u411 0994  
                      u340 0A76                        u260 0B7A                        u420 09BA  
                      u341 0A72                        u261 0B76                        u421 09B6  
                      u350 0D26                        u270 0B96                        u430 0B18  
                      u351 0D22                        u271 0B92                        u431 0B10  
                      u280 0C3A                        u360 0846                        u281 0C36  
                      u361 0842                        u290 0C58                        u370 08B4  
                      u507 0BEE                        u291 0C54                        u371 08B0  
                      u380 08EE                        u517 0D72                        u381 08EA  
                      u390 0906                        u391 0902                        u448 0B1A  
                      u457 0B2E                        u467 0D44                        u477 0D56  
                      u487 0BC2                        u497 0BD8                        wreg 000FE8  
                     l1101 0B96                       l1103 0B9E                       l1111 0C3A  
                     l1105 0BA0                       l1121 0C76                       l1113 0C42  
                     l1201 08F4                       l1131 09F2                       l1107 0BA6  
                     l1123 0C7C                       l1115 0C4A                       l1211 0934  
                     l1203 0906                       l1141 0A30                       l1133 09FC  
                     l1125 09CA                       l1117 0C58                       l1109 0C28  
                     l1213 0976                       l1205 091C                       l1221 09BA  
                     l1151 0A76                       l1143 0A42                       l1135 0A0E  
                     l1127 09DA                       l1119 0C6E                       l1215 0982  
                     l1207 0928                       l1231 0ABA                       l1153 0A88  
                     l1145 0A54                       l1137 0A20                       l1129 09EC  
                     l1161 0D06                       l1217 0986                       l1209 092C  
                     l1241 0AFA                       l1233 0AC4                       l1225 0A9A  
                     l1155 0A8E                       l1147 0A5A                       l1139 0A26  
                     l1163 0D0A                       l1091 0B5C                       l1171 0852  
                     l1219 0998                       l1243 0B06                       l1235 0AD0  
                     l1227 0AA2                       l1149 0A64                       l1157 0CE8  
                     l1093 0B64                       l1181 089E                       l1173 085A  
                     l1165 0828                       l1245 0B24                       l1237 0AEC  
                     l1229 0AA6                       l1159 0CF4                       l1095 0B6C  
                     l1087 0B42                       l1183 08A6                       l1167 0834  
                     l1239 0AF0                       l1097 0B7A                       l1089 0B4A  
                     l1185 08B4                       l1177 085E                       l1169 0846  
                     l1099 0B80                       l1195 08C4                       l1187 08B8  
                     l1179 088E                       l1189 08C0                       l1199 08F2  
                     STR_1 080B                       STR_2 0819          ?_Lcd_Write_String 0027  
                     _main 0A9A                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000         ??_Lcd_Write_String 0029            __end_of_Lcd_Cmd 0D80  
             ___param_bank 000000                      ?_main 0023            __end_of___lwdiv 0BB6  
          __end_of___lwmod 0C8C    __size_of_Lcd_Set_Cursor 00D2                      _TRISD 000F95  
          __end_of_dpowers 080B                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 09C8           __end_of_Lcd_Init 0C28           __end_of_Lcd_Port 0CE8  
          __initialization 0D80               __end_of_main 0B42                     ??_main 003D  
            __activetblptr 000002                     _OSCCON 000FD3                  ??_Lcd_Cmd 0024  
  __size_of_Lcd_Write_Char 0038                  ??___lwdiv 0027                  ??___lwmod 002E  
                   _linha1 0013                     _linha2 0003                     clear_0 0D86  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0035            Lcd_Set_Cursor@a 0027  
          Lcd_Set_Cursor@b 0026            Lcd_Set_Cursor@y 0029            Lcd_Set_Cursor@z 0028  
               __accesstop 0060    __end_of__initialization 0D8C              ___rparam_used 000001  
           __pcstackCOMRAM 0023             _Lcd_Set_Cursor 09C8                  ?_Lcd_Init 0023  
                ?_Lcd_Port 0023  __size_of_Lcd_Write_String 0040     __end_of_Lcd_Set_Cursor 0A9A  
               ??_Lcd_Init 0026                 ??_Lcd_Port 0023             _Lcd_Write_Char 0D28  
                  _Lcd_Cmd 0D60                    __Hparam 0000                    __Lparam 0000  
                  ___lwdiv 0B42                    ___lwmod 0C28               __psmallconst 0800  
                  __pcinit 0D80                    __ramtop 0800            ?_Lcd_Set_Cursor 0026  
                  __ptext0 0A9A                    __ptext1 0828                    __ptext2 0C28  
                  __ptext3 0B42                    __ptext4 0CE8                    __ptext5 0D28  
                  __ptext6 09C8                    __ptext7 0BB6                    __ptext8 0D60  
                  __ptext9 0C8C                    _dpowers 0801                    _sprintf 0828  
   __end_of_Lcd_Write_Char 0D60       end_of_initialization 0D8C              __Lmediumconst 0000  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                Lcd_Port@a 0023            ?_Lcd_Write_Char 0023          Lcd_Write_String@a 0027  
        Lcd_Write_String@i 0029           _Lcd_Write_String 0CE8        start_initialization 0D80  
        __size_of_Lcd_Init 0072          __size_of_Lcd_Port 005C            Lcd_Write_Char@a 0026  
          Lcd_Write_Char@y 0025                __pbssCOMRAM 0001                   ?_Lcd_Cmd 0023  
              sprintf@flag 0038                sprintf@prec 0039           ___lwdiv@dividend 0023  
         ??_Lcd_Set_Cursor 0027                   ?___lwdiv 0023                   ?___lwmod 002A  
              __smallconst 0800           ___lwdiv@quotient 0027                   ?_sprintf 002F  
                 _LATDbits 000F8C                   Lcd_Cmd@a 0025           ??_Lcd_Write_Char 0024  
                 _Lcd_Init 0BB6                   _Lcd_Port 0C8C   __end_of_Lcd_Write_String 0D28  
         __size_of_Lcd_Cmd 0020                   __Hrparam 0000                   __Lrparam 0000  
         __size_of___lwdiv 0074           __size_of___lwmod 0064                 sprintf@val 003A  
          ___lwdiv@divisor 0025            ___lwdiv@counter 0029                   _contador 0001  
         __size_of_sprintf 01A0              __size_of_main 00A8         Lcd_Write_Char@temp 0024  
                sprintf@ap 0036                  sprintf@sp 002F           ___lwmod@dividend 002A  
       Lcd_Set_Cursor@temp 002A                   sprintf@c 003C                   sprintf@f 0031  
          ___lwmod@divisor 002C            ___lwmod@counter 002E  
